@inject IJSRuntime JSRuntime
@implements IDisposable
@using Microsoft.AspNetCore.Components.Forms;

<div class="map-wrapper">
    @if (IsEditable)
    {
        <div class="controls">
            <button @onclick="DeleteLastWaypoint" class="btn btn-secondary" title="Delete last waypoint" type="button">
                <i class="bi bi-trash"></i> Remove Last Waypoint
            </button>
        </div>
    }

    <div style="height: @(Height); width:@(Width);" @ref="_map"></div>
</div>

@code {

    private ElementReference _map;
    private DotNetObjectReference<RouteMap> _routeMapReference;
    private IJSObjectReference _blazingTrailsMapModule;

    [CascadingParameter] private EditContext CascadedEditContext { get; set; }

    [Parameter] public string Height { get; set; } = "500px";
    [Parameter] public string Width { get; set; } = "1000px";
    [Parameter] public bool IsEditable { get; set; }
    [Parameter] public List<LatLong> Waypoints { get; set; } = new List<LatLong>();
    [Parameter] public EventCallback<LatLong> OnWaypointAdded { get; set; }
    [Parameter] public EventCallback<LatLong> OnWaypointDeleted { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("First Render Called");
            _blazingTrailsMapModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/BlazingTrails.ComponentLibrary/map.js");
            _routeMapReference = DotNetObjectReference.Create(this);
            await _blazingTrailsMapModule.InvokeVoidAsync("initialize", _routeMapReference, _map, IsEditable, Waypoints);
            //await JSRuntime.InvokeVoidAsync("blazingTrails.map.initialize", _routeMapReference, _map);
        }
    }

    public async Task DeleteLastWaypoint()
        //=> await JSRuntime.InvokeVoidAsync("blazingTrails.map.deleteLastWaypoint", _routeMapReference, _map);
        => await _blazingTrailsMapModule.InvokeVoidAsync("deleteLastWaypoint", _routeMapReference, _map);

    [JSInvokable]
    public async Task WaypointAdded(decimal latitude, decimal longitude)
        => await OnWaypointAdded.InvokeAsync(new LatLong(latitude, longitude));

    [JSInvokable]
    public async Task WaypointDeleted(decimal latitude, decimal longitude)
        => await OnWaypointDeleted.InvokeAsync(new LatLong(latitude, longitude));

    public void Dispose()
    {
        Console.WriteLine("Map Disposed");
        _routeMapReference?.Dispose();
    }
}
